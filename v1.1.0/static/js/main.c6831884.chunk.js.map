{"version":3,"sources":["utils/utils.ts","components/ImageCanvas.tsx","lib/fft.ts","utils/Random.ts","lib/airglow.ts","components/Main.tsx","components/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["swap","arr","i","j","t","getCurrentVersion","versionNumber","process","tmp","window","location","pathname","split","length","s","startsWith","v","slice","compareVersion","a","b","regex","aa","exec","bb","x","parseInt","y","getContext","canvas","ctx","Error","checkNulls","ss","secret","original","encoded","showImage","result","size","width","height","cv","imshow","id","delete","image","Image","src","toDataURL","ImageCanvas","props","useState","setImage","canvasRef","useRef","clearCanvas","clearRect","onImageChanged","onCanvasSet","useEffect","current","e","files","target","file","reader","FileReader","onload","disallowTransparency","beginPath","fillStyle","fillRect","drawImage","onloadend","toString","readAsDataURL","value","name","join","fileID","fileRef","className","ref","htmlFor","type","onChange","disabled","onClick","fileInput","click","preventDefault","free","Array","from","forEach","_","fftOneChannel","optimalRows","getOptimalDFTSize","rows","optimalCols","cols","padded","Mat","s0","Scalar","all","copyMakeBorder","BORDER_CONSTANT","plane0","convertTo","CV_32F","planes","MatVector","complexI","plane1","zeros","push_back","merge","dft","ifftOneChannel","p","DFT_SCALE","DFT_INVERSE","get","fft2Image","channels","output","map","ifft2Image","input","ch","CV_8UC4","cvtColor","COLOR_RGB2RGBA","UINT32_MAX","RNG","seed","c","d","this","setState","state","undefined","makeSeed","splitMix32","Math","floor","random","r","hash","charCodeAt","hashCode","Date","now","z","shuffleWatermark","data","rng","shuffleMap","getPermutation","newData","k","putWatermarks","nWatermarks","nRows","nCols","nChannels","ucharPtr","makeWatermark","processed","ksize","Size","GaussianBlur","shuffled","mix","args","addWeighted","alpha","separate","encode","canvases","logger","options","secretKey","trim","imread","watermark","numWatermarks","fftOriginal","fftWatermark","fftEncoded","decodeWatermark","getScaled","scaled","resize","decode","encodedScaled","decoded","key","loggingResolve","Main","message","status","setStatus","progress","setProgress","setTimeout","alertType","stack","Promise","resolve","console","error","log","images","setImages","onImageChange","setNumWatermarks","setSecretKey","setAlpha","isWorking","toggleIsWorking","maxWatermarks","useMemo","canEncode","canDecode","onStart","isEncode","Object","keys","some","err","role","style","display","required","min","max","n","Number","isNaN","filename","document","createElement","href","download","body","appendChild","removeChild","rel","fetchVersionList","fetch","response","text","content","sorted","filter","sort","versionList","warn","Footer","currentVersion","setVersionList","then","vl","version","selectedIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","onOpenCVReady","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6831884.chunk.js","sourcesContent":["import { ImageDict } from \"./types\"\r\n\r\nexport const swap = (arr: number[] | Uint8ClampedArray, i: number, j: number): void => {\r\n  const t = arr[i]\r\n  arr[i] = arr[j]\r\n  arr[j] = t\r\n}\r\n\r\nexport const getCurrentVersion = (): string => {\r\n  const versionNumber = process.env.REACT_APP_VERSION || \"0.0.0\"\r\n  const tmp = window.location.pathname.split(\"/\")\r\n  if (tmp.length > 1) {\r\n    const s = tmp[1]\r\n    if (s === \"dev\") {\r\n      return s\r\n    } else if (s.startsWith(\"v\")) {\r\n      const v = s.slice(1)\r\n      if (!versionNumber.startsWith(v)) {\r\n        return \"???\"\r\n      }\r\n    }\r\n  }\r\n  return versionNumber\r\n}\r\n\r\nexport const compareVersion = (a: string, b: string): number => {\r\n  if (a === \"dev\") {\r\n    return -1\r\n  } else if (b === \"dev\") {\r\n    return 1\r\n  }\r\n  const regex = /^(\\d+)\\.(\\d+)\\.(\\d+)$/\r\n  const aa = regex.exec(a) || [ \"0\", \"0\", \"0\", \"0\" ]\r\n  const bb = regex.exec(b) || [ \"0\", \"0\", \"0\", \"0\" ]\r\n  for (const i of [ 1, 2, 3 ]) {\r\n    const x = parseInt(aa[i], 10)\r\n    const y = parseInt(bb[i], 10)\r\n    if (x > y) {\r\n      return -1\r\n    } else if (x < y) {\r\n      return 1\r\n    }\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getContext = (canvas: HTMLCanvasElement): CanvasRenderingContext2D => {\r\n  const ctx = canvas.getContext(\"2d\")\r\n  if (!ctx) {\r\n    throw new Error(\"No 2D context.\")\r\n  }\r\n  return ctx\r\n}\r\nexport const getImageData = (\r\n  canvas: HTMLCanvasElement\r\n): ImageData => getContext(canvas).getImageData(0, 0, canvas.width, canvas.height)\r\n\r\nexport const isDevelopment = process.env.NODE_ENV === \"development\"\r\n\r\nexport function checkNulls<T>(\r\n  ss: ImageDict<T | null>\r\n): asserts ss is ImageDict<T> {\r\n  if (ss.secret === null || ss.original === null || ss.encoded === null) {\r\n    throw new Error(\"Check null failed\")\r\n  }\r\n}\r\n\r\nexport const showImage = (canvas: HTMLCanvasElement, result: cv.Mat): HTMLImageElement => {\r\n  const { width, height } = result.size()\r\n  canvas.width = width\r\n  canvas.height = height\r\n  cv.imshow(canvas.id, result)\r\n  result.delete()\r\n  const image = new Image(width, height)\r\n  image.src = canvas.toDataURL(\"image/png\")\r\n  return image\r\n}\r\n\r\n// For test use only\r\nexport const showImageTest = (data: cv.Mat) => {\r\n  const canvas = document.createElement(\"canvas\")\r\n  canvas.id = \"tmp\"\r\n  document.body.appendChild(canvas)\r\n  const image = showImage(canvas, data)\r\n  document.body.removeChild(canvas)\r\n  const w = window.open(\"about:blank\", \"__blank\")\r\n  w?.document.body.appendChild(image)\r\n}\r\n","import { ChangeEvent, useEffect, useRef, useState } from \"react\"\r\n\r\nimport { getContext } from \"../utils/utils\"\r\n\r\nimport \"./ImageCanvas.css\"\r\nimport { i18n } from \"../utils/i18n\"\r\n\r\n\r\nexport const ImageCanvas = (props: {\r\n  name: string,\r\n  onImageChanged: (image: HTMLImageElement | null) => void,\r\n  onCanvasSet: (canvas: HTMLCanvasElement | null) => void,\r\n  disabled: boolean,\r\n  disallowTransparency?: boolean\r\n}) => {\r\n  const [ image, setImage ] = useState<null | HTMLImageElement>(null)\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null)\r\n  const clearCanvas = (canvas: HTMLCanvasElement | null) => {\r\n    if (canvas === null) {\r\n      return\r\n    }\r\n    canvas.width = 10\r\n    canvas.height = 10\r\n    const ctx = getContext(canvas)\r\n    ctx.clearRect(0, 0, 10, 10)\r\n    setImage(null)\r\n    props.onImageChanged(null)\r\n  }\r\n\r\n  const { onCanvasSet } = props\r\n  useEffect(() => onCanvasSet(canvasRef.current), [ onCanvasSet, canvasRef ])\r\n  const onImageChanged = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    const canvas = canvasRef.current\r\n    if (canvas === null) {\r\n      return\r\n    }\r\n    clearCanvas(canvas)\r\n    const files = e.target.files\r\n    if (files === null || files.length < 1) {\r\n      setImage(null)\r\n      return\r\n    }\r\n    const file = files[0]\r\n    const image = new Image()\r\n    const reader = new FileReader()\r\n    image.onload = () => {\r\n      const { width, height } = image\r\n      canvas.width = width\r\n      canvas.height = height\r\n      const ctx = getContext(canvas)\r\n      if (props.disallowTransparency) {\r\n        ctx.beginPath()\r\n        ctx.fillStyle = \"black\"\r\n        ctx.fillRect(0, 0, width, height)\r\n      }\r\n      ctx.drawImage(image, 0, 0)\r\n      setImage(image)\r\n      props.onImageChanged(image)\r\n    }\r\n    reader.onloadend = () => {\r\n      if (reader.result !== null) {\r\n        image.src = reader.result.toString()\r\n      }\r\n    }\r\n    reader.readAsDataURL(file)\r\n    e.target.value = \"\"\r\n  }\r\n  const id = props.name.split(/\\s/).join(\"-\")\r\n  const fileID = `file-${ id }`\r\n  const fileRef = useRef<HTMLInputElement | null>(null)\r\n  return <div className=\"airglow-image-canvas input-group\">\r\n    <div className=\"airglow-canvas-container mb-3\">\r\n      <canvas className=\"airglow-canvas\" width={ 10 } height={ 10 } ref={ canvasRef } id={ `canvas-${ id }` } />\r\n    </div>\r\n    <div className=\"airglow-file input-group mb-3\">\r\n      <label className=\"input-group-text\" htmlFor={ fileID }>{ i18n(props.name) }</label>\r\n      <input id={ fileID }\r\n             type=\"file\" className=\"form-control\"\r\n             onChange={ onImageChanged }\r\n             ref={ fileRef }\r\n             disabled={ props.disabled }\r\n      />\r\n      <div className=\"form-control\" onClick={ () => {\r\n        const fileInput = fileRef.current\r\n        if (fileInput !== null) {\r\n          fileInput.click()\r\n        }\r\n      } }>{\r\n        image === null ? \"\" : `${ image.width }*${ image.height }`\r\n      }</div>\r\n      <button className=\"input-group-text\" onClick={ (e) => {\r\n        e.preventDefault()\r\n        clearCanvas(canvasRef.current)\r\n      } }>{ i18n(\"Clear\") }</button>\r\n    </div>\r\n  </div>\r\n}\r\n","export type Tensor = [ cv.Mat, cv.Mat, cv.Mat ]\r\n\r\nexport const free = (t: Tensor): void => Array.from({ length: 3 }).forEach((_, i) => t[i].delete())\r\n\r\nconst fftOneChannel = (\r\n  src: cv.Mat\r\n): cv.Mat => {\r\n  const optimalRows = cv.getOptimalDFTSize(src.rows)\r\n  const optimalCols = cv.getOptimalDFTSize(src.cols)\r\n  const padded = new cv.Mat()\r\n  const s0 = cv.Scalar.all(0)\r\n  cv.copyMakeBorder(src, padded, 0, optimalRows - src.rows, 0,\r\n    optimalCols - src.cols, cv.BORDER_CONSTANT, s0)\r\n\r\n  const plane0 = new cv.Mat()\r\n  padded.convertTo(plane0, cv.CV_32F)\r\n  const planes = new cv.MatVector()\r\n  const complexI = new cv.Mat()\r\n  const plane1 = cv.Mat.zeros(padded.rows, padded.cols, cv.CV_32F)\r\n  planes.push_back(plane0)\r\n  planes.push_back(plane1)\r\n  cv.merge(planes, complexI)\r\n\r\n  cv.dft(complexI, complexI)\r\n\r\n  padded.delete()\r\n  plane0.delete()\r\n  plane1.delete()\r\n  planes.delete()\r\n  return complexI\r\n}\r\n\r\nconst ifftOneChannel = (\r\n  src: cv.Mat\r\n): cv.Mat => {\r\n  const p = new cv.Mat()\r\n  cv.dft(src, p, cv.DFT_SCALE | cv.DFT_INVERSE)\r\n  const planes = new cv.MatVector()\r\n  cv.split(p, planes)\r\n  const result = planes.get(0)\r\n  planes.delete()\r\n  return result\r\n}\r\n\r\nexport const fft2Image = async (\r\n  image: cv.Mat\r\n): Promise<Tensor> => {\r\n  const channels = new cv.MatVector()\r\n  cv.split(image, channels)\r\n  const output = Array.from({ length: 3 }).map((_, i) => fftOneChannel(channels.get(i)))\r\n  return output as Tensor\r\n}\r\n\r\nexport const ifft2Image = async (\r\n  input: Tensor\r\n): Promise<cv.Mat> => {\r\n  const channels = new cv.MatVector()\r\n  for (const ch of input) {\r\n    const t = ifftOneChannel(ch)\r\n    channels.push_back(t)\r\n    t.delete()\r\n  }\r\n  const output = new cv.Mat()\r\n  const result = new cv.Mat()\r\n  cv.merge(channels, output)\r\n  output.convertTo(result, cv.CV_8UC4)\r\n  cv.cvtColor(result, result, cv.COLOR_RGB2RGBA)\r\n  channels.delete()\r\n  output.delete()\r\n  return result\r\n}\r\n","/*\r\n * xoshiro128** random number generator.\r\n * http://prng.di.unimi.it\r\n */\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\nimport { swap } from './utils'\r\n\r\nconst UINT32_MAX = 4294967296\r\n\r\nexport interface IRandomState {\r\n  a: number\r\n  b: number\r\n  c: number\r\n  d: number\r\n}\r\n\r\nexport type RandomSeed = IRandomState | number | string\r\n\r\nexport class RNG {\r\n\r\n  public static hashCode(s: string): number {\r\n    let hash = 0\r\n    if (s.length === 0) {\r\n      return hash\r\n    }\r\n    for (let i = 0; i < s.length; i++) {\r\n      const chr = s.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + chr\r\n      hash %= UINT32_MAX\r\n    }\r\n    return hash\r\n  }\r\n\r\n  public static makeSeed(state?: number | string): number {\r\n    if (typeof state === 'number') {\r\n      return state % UINT32_MAX\r\n    } else if (typeof state === 'string') {\r\n      return RNG.hashCode(state) % UINT32_MAX\r\n    }\r\n    return Date.now() % UINT32_MAX\r\n  }\r\n\r\n  public static splitMix32(x: [number]): number {\r\n    x[0] = (x[0] + 0x9e3779b9) % UINT32_MAX\r\n    let z = x[0]\r\n    z = ((z ^ (z >>> 16)) * 0x85ebca6b) % UINT32_MAX\r\n    z = ((z ^ (z >>> 13)) * 0xc2b2ae35) % UINT32_MAX\r\n    return (z ^ (z >>> 16)) % UINT32_MAX\r\n  }\r\n\r\n  private s: IRandomState = {a: 0, b: 0, c: 0, d: 0}\r\n\r\n  constructor(seed?: RandomSeed) {\r\n    this.setState(seed)\r\n  }\r\n\r\n  public setState(state?: RandomSeed): void {\r\n    if (state === undefined || typeof state !== 'object') {\r\n      const seed: [number] = [RNG.makeSeed(state)]\r\n      const a = RNG.splitMix32(seed)\r\n      const b = RNG.splitMix32(seed)\r\n      const c = RNG.splitMix32(seed)\r\n      const d = RNG.splitMix32(seed)\r\n      state = {a, b, c, d}\r\n    }\r\n    this.s = state\r\n  }\r\n\r\n  public getState(): IRandomState {\r\n    return this.s\r\n  }\r\n\r\n  public getPermutation(length: number): number[] {\r\n    const arr = Array.from({ length }, (_, i) => i)\r\n    while (length > 1) {\r\n      length -= 1\r\n      const j = Math.floor(this.random() * length)\r\n      swap(arr, length, j)\r\n    }\r\n    return arr\r\n  }\r\n\r\n  public random(): number {\r\n    const s = this.s\r\n    const t = s.b << 9\r\n    let r = s.a * 5\r\n    r = ((r << 7) | (r >>> 25)) * 9\r\n    s.c ^= s.a\r\n    s.d ^= s.b\r\n    s.b ^= s.c\r\n    s.a ^= s.d\r\n    s.c ^= t\r\n    s.d = (s.d << 11) | (s.d >>> 21)\r\n    return (r >>> 0) / UINT32_MAX\r\n  }\r\n}\r\n","import { fft2Image, free, ifft2Image, Tensor } from \"./fft\"\r\n\r\nimport { RNG } from \"../utils/Random\"\r\nimport { Canvases, Logger } from \"../utils/types\"\r\nimport { checkNulls, showImage } from \"../utils/utils\"\r\n\r\ninterface AirglowOptions {\r\n  alpha: number\r\n  numWatermarks: number\r\n  secretKey: string\r\n}\r\n\r\nexport const getMaxWatermarks = (original: HTMLImageElement | null, secret: HTMLImageElement | null): number => {\r\n  if (original === null || secret === null) {\r\n    return 0\r\n  }\r\n  const nRows = Math.floor(original.height / 2 / secret.height)\r\n  const nCols = Math.floor(original.width / secret.width)\r\n  return nRows * nCols\r\n}\r\n\r\nconst shuffleWatermark = (data: cv.Mat, rng: RNG): cv.Mat => {\r\n  const length = Math.floor(data.data.length / 4)\r\n  const shuffleMap = rng.getPermutation(Math.floor(length / 2))\r\n  const newData = cv.Mat.zeros(data.rows, data.cols, data.type())\r\n  shuffleMap.forEach((v, i) => {\r\n    for (let k = 0; k < 4; ++k) {\r\n      newData.data[i * 4 + k] = data.data[v * 4 + k]\r\n      newData.data[(length - 1 - i) * 4 + k] = data.data[v * 4 + k]\r\n    }\r\n  })\r\n  return newData\r\n}\r\n\r\nconst putWatermarks = (\r\n  data: cv.Mat,\r\n  original: cv.Mat,\r\n  secret: cv.Mat,\r\n  nWatermarks: number\r\n): void => {\r\n  const nRows = Math.floor(original.rows / 2 / secret.cols)\r\n  const nCols = Math.floor(original.cols / secret.cols)\r\n  const nChannels = data.channels()\r\n  if (nRows === 0 || nCols === 0) {\r\n    throw new Error(`Secret image is too large: use an image whose width <= ${ original.cols } and` +\r\n      ` height <= ${ Math.floor(original.rows / 2) }`)\r\n  }\r\n  const { width, height } = secret.size()\r\n  for (let i = 0; i < nRows; ++i) {\r\n    for (let j = 0; j < nCols; ++j) {\r\n      nWatermarks -= 1\r\n      if (nWatermarks < 0) {\r\n        return\r\n      }\r\n      for (let x = 0; x < height; ++x) {\r\n        for (let y = 0; y < width; ++y) {\r\n          const a = data.ucharPtr(i * height + x, j * width + y)\r\n          const b = secret.ucharPtr(x, y)\r\n          for (let c = 0; c < nChannels; ++c) {\r\n            a[c] = b[c]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst makeWatermark = (\r\n  original: cv.Mat,\r\n  secret: cv.Mat,\r\n  rng: RNG,\r\n  nWatermarks = 1\r\n): cv.Mat => {\r\n  const { width, height } = original.size()\r\n  const data = cv.Mat.zeros(height, width, secret.type())\r\n  const processed = new cv.Mat()\r\n  const ksize = new cv.Size(3, 3)\r\n  cv.GaussianBlur(secret, processed, ksize, 0, 0)\r\n  putWatermarks(data, original, processed, nWatermarks)\r\n  const shuffled = shuffleWatermark(data, rng)\r\n  processed.delete()\r\n  data.delete()\r\n  return shuffled\r\n}\r\n\r\nconst mix = (original: Tensor, secret: Tensor, args: AirglowOptions): Tensor => {\r\n  return original.map((x, i) => {\r\n      const t = new cv.Mat()\r\n      cv.addWeighted(secret[i], args.alpha, x, 1, 0, t)\r\n      return t\r\n    }\r\n  ) as Tensor\r\n}\r\n\r\nconst separate = (original: Tensor, encoded: Tensor, args: AirglowOptions): Tensor => {\r\n  return original.map((x, i) => {\r\n    const t = new cv.Mat()\r\n    cv.addWeighted(encoded[i], 1, x, -1, 0, t)\r\n    cv.addWeighted(t, 1 / args.alpha, t, 0, 0, t)\r\n    return t\r\n  }) as Tensor\r\n}\r\n\r\nexport const encode = async (\r\n  canvases: Canvases,\r\n  logger: Logger,\r\n  options: AirglowOptions\r\n): Promise<HTMLImageElement> => {\r\n  await logger(0, \"Initializing\")\r\n  const secretKey = options.secretKey.trim()\r\n  if (secretKey === \"\") {\r\n    throw new Error(\"Secret key cannot be empty\")\r\n  }\r\n  checkNulls(canvases)\r\n  const original = cv.imread(canvases.original.id)\r\n  const secret = cv.imread(canvases.secret.id)\r\n  await logger(5, \"Making watermarks\")\r\n  const rng = new RNG(secretKey)\r\n  const watermark = makeWatermark(original, secret, rng, options.numWatermarks)\r\n  await logger(20, \"Calculating the frequency domain of original image\")\r\n  const fftOriginal = await fft2Image(original)\r\n  await logger(40, \"Calculating the frequency domain of watermarks\")\r\n  const fftWatermark = await fft2Image(watermark)\r\n  await logger(60, \"Calculating the frequency domain of encoded image\")\r\n  const fftEncoded = mix(fftOriginal, fftWatermark, options)\r\n  await logger(80, \"Calculating the resulting image\")\r\n  const encoded = await ifft2Image(fftEncoded)\r\n  const result = showImage(canvases.encoded, encoded)\r\n  await logger(100, \"Finished!\", \"success\")\r\n  watermark.delete()\r\n  free(fftOriginal)\r\n  free(fftWatermark)\r\n  free(fftEncoded)\r\n  return result\r\n}\r\n\r\nexport const decodeWatermark = (watermark: cv.Mat, rng: RNG): cv.Mat => {\r\n  const length = Math.floor(watermark.data.length / 4)\r\n  const shuffleMap = rng.getPermutation(Math.floor(length / 2))\r\n  const data = cv.Mat.zeros(watermark.rows, watermark.cols, watermark.type())\r\n  shuffleMap.forEach((v, i) => {\r\n    for (let k = 0; k < 4; ++k) {\r\n      data.data[v * 4 + k] = watermark.data[i * 4 + k]\r\n      data.data[(length - 1 - v) * 4 + k] = watermark.data[(length - 1 - i) * 4 + k]\r\n    }\r\n  })\r\n  return data\r\n}\r\n\r\nexport const getScaled = (encoded: cv.Mat, original: cv.Mat): cv.Mat => {\r\n  const scaled = new cv.Mat()\r\n  cv.resize(encoded, scaled, original.size())\r\n  return scaled\r\n}\r\n\r\nexport const decode = async (\r\n  canvases: Canvases,\r\n  logger: Logger,\r\n  options: AirglowOptions\r\n): Promise<HTMLImageElement> => {\r\n  await logger(0, \"Initializing\")\r\n  const secretKey = options.secretKey.trim()\r\n  if (secretKey === \"\"\r\n  ) {\r\n    throw new Error(\"Secret key cannot be empty\")\r\n  }\r\n  checkNulls(canvases)\r\n  const original = cv.imread(canvases.original.id)\r\n  const encoded = cv.imread(canvases.encoded.id)\r\n  await logger(5, \"Calculating the frequency domain of original image\")\r\n  const fftOriginal = await fft2Image(original)\r\n  await logger(20, \"Scaling the encoded image\")\r\n  const encodedScaled = getScaled(encoded, original)\r\n  await logger(30, \"Calculating the frequency domain of encoded image\")\r\n  const fftEncoded = await fft2Image(encodedScaled)\r\n  await logger(45, \"Calculating the frequency domain of watermarks\")\r\n  const fftWatermark = separate(fftOriginal, fftEncoded, options)\r\n  await logger(60, \"Calculating the watermarks image\")\r\n  const watermark = await ifft2Image(fftWatermark)\r\n  await logger(80, \"Calculating the resulting image\")\r\n  const rng = new RNG(secretKey)\r\n  const decoded = decodeWatermark(watermark, rng)\r\n  const result = showImage(canvases.secret, decoded)\r\n  await logger(100, \"Finished!\", \"success\")\r\n  free(fftOriginal)\r\n  free(fftWatermark)\r\n  free(fftEncoded)\r\n  encodedScaled.delete()\r\n  watermark.delete()\r\n  return result\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nimport { useEffect, useMemo, useState } from \"react\"\r\n\r\nimport { AlertType, Canvases, Images, ImageType, Logger, OnClickEventHandler } from \"../utils/types\"\r\nimport { ImageCanvas } from \"./ImageCanvas\"\r\nimport { i18n } from \"../utils/i18n\"\r\n\r\nimport \"./Main.css\"\r\nimport { decode, encode, getMaxWatermarks } from \"../lib/airglow\"\r\n\r\nconst download = (canvas: HTMLCanvasElement, filename: string) => {\r\n  const a = document.createElement(\"a\")\r\n  a.href = canvas.toDataURL(\"image/png\")\r\n  a.download = filename\r\n  a.style.display = \"none\"\r\n  document.body.appendChild(a)\r\n  a.click()\r\n  document.body.removeChild(a)\r\n}\r\n\r\nconst canvases: Canvases = {\r\n  encoded: null, original: null, secret: null\r\n}\r\nconst onCanvasSet = (key: ImageType) => (canvas: HTMLCanvasElement | null) => void (canvases[key] = canvas)\r\n\r\nlet loggingResolve: ((v: void) => void) | null = null\r\n\r\nexport const Main = (): JSX.Element => {\r\n  const [ status, setStatus ] = useState({\r\n    type: null, message: \"\"\r\n  } as {\r\n    type: AlertType | null,\r\n    message: string\r\n  })\r\n  const [ progress, setProgress ] = useState(0)\r\n  useEffect(() => {\r\n    if (loggingResolve !== null) {\r\n      const t = loggingResolve\r\n      loggingResolve = null\r\n      setTimeout(t, 300)\r\n    }\r\n  })\r\n  const logger: Logger = (\r\n    progress, status, alertType, stack\r\n  ) => new Promise<void>(resolve => {\r\n    if (alertType === \"danger\") {\r\n      console.error(stack === undefined ? status : stack)\r\n    } else {\r\n      console.log(`${ progress }: ${ status }`)\r\n    }\r\n    loggingResolve = resolve\r\n    if (progress !== null) {\r\n      setProgress(progress)\r\n    }\r\n    setStatus({\r\n      type: alertType === undefined ? \"primary\" : alertType,\r\n      message: status\r\n    })\r\n  })\r\n  const [ images, setImages ] = useState<Images>({\r\n    encoded: null, original: null, secret: null\r\n  })\r\n  const onImageChange = (key: ImageType) => (image: HTMLImageElement | null) => setImages({\r\n    ...images,\r\n    [key]: image\r\n  })\r\n  const [ numWatermarks, setNumWatermarks ] = useState(1)\r\n  const [ secretKey, setSecretKey ] = useState(\"Airglow\")\r\n  const [ alpha, setAlpha ] = useState(0.05)\r\n  const [ isWorking, toggleIsWorking ] = useState(false)\r\n\r\n  const maxWatermarks = useMemo(() => getMaxWatermarks(images.original, images.secret), [\r\n    images\r\n  ])\r\n  const canEncode = useMemo(() => images.secret !== null && images.original !== null &&\r\n    numWatermarks <= maxWatermarks && secretKey.length > 0, [\r\n    images, numWatermarks, maxWatermarks, secretKey\r\n  ])\r\n  const canDecode = useMemo(() => images.encoded !== null && images.original !== null &&\r\n    secretKey.length > 0, [\r\n    images, secretKey\r\n  ])\r\n\r\n  const onStart = (isEncode: boolean): OnClickEventHandler<HTMLButtonElement> => async (e) => {\r\n    e.preventDefault()\r\n    if (isWorking || Object.keys(canvases).some((k) => canvases[k as ImageType] === null)) {\r\n      return\r\n    }\r\n    toggleIsWorking(true)\r\n    const options = {\r\n      numWatermarks, secretKey, alpha\r\n    }\r\n    try {\r\n      const result = await (isEncode ? encode : decode)(canvases, logger, options)\r\n      onImageChange(isEncode ? \"encoded\" : \"secret\")(result)\r\n    } catch (e) {\r\n      const err = e as Error\r\n      await logger(null, err.message, \"danger\", err.stack)\r\n    }\r\n    toggleIsWorking(false)\r\n  }\r\n\r\n  return <div className=\"airglow-main container-fluid\">\r\n    <div className={ \"alert alert-dismissible fade show\" + (status.type !== null ? ` alert-${ status.type }` : \"\") }\r\n         role=\"alert\" style={ { display: status.type === null ? \"none\" : \"block\" } }>\r\n      { status.message }\r\n      <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"\r\n              onClick={ () => {\r\n                setStatus({ type: null, message: \"\" })\r\n              } }>\r\n      </button>\r\n    </div>\r\n    <div className=\"airglow-progress progress mb-3\">\r\n      <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\"\r\n           style={ { width: `${ progress }%` } } />\r\n    </div>\r\n    <form className=\"airglow-form\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-lg-4\">\r\n          <ImageCanvas\r\n            name=\"Secret Image\" disabled={ isWorking }\r\n            onCanvasSet={ onCanvasSet(\"secret\") }\r\n            onImageChanged={ onImageChange(\"secret\") }\r\n            disallowTransparency={ true }\r\n          />\r\n          <div className=\"input-group mb-3\">\r\n            <span className=\"input-group-text\">{ i18n(\"Number of Watermarks\") }</span>\r\n            <input\r\n              type=\"number\" className=\"form-control\"\r\n              required={ true }\r\n              min={ 1 }\r\n              max={ maxWatermarks }\r\n              value={ numWatermarks }\r\n              disabled={ isWorking }\r\n              onChange={ (e) => {\r\n                let n = parseInt(e.target.value)\r\n                if (Number.isNaN(n)) {\r\n                  return\r\n                }\r\n                n = n > maxWatermarks ? maxWatermarks : n < 1 ? 1 : n\r\n                setNumWatermarks(n)\r\n              } } />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 col-lg-4\">\r\n          <ImageCanvas\r\n            name=\"Original Image\" disabled={ isWorking }\r\n            onCanvasSet={ onCanvasSet(\"original\") }\r\n            onImageChanged={ onImageChange(\"original\") }\r\n          />\r\n          <div className=\"input-group mb-3\">\r\n            <span className=\"input-group-text\">{ i18n(\"Secret Key\") }</span>\r\n            <input\r\n              type=\"text\" className=\"form-control\"\r\n              required={ true }\r\n              value={ secretKey }\r\n              disabled={ isWorking }\r\n              onChange={ (e) => void setSecretKey(e.target.value) }\r\n            />\r\n            <div className=\"airglow-help-text form-text\">{ i18n(\"A secret key used to encrypt the data.\") }</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 col-lg-4\">\r\n          <ImageCanvas\r\n            name=\"Encoded Image\" disabled={ isWorking }\r\n            onCanvasSet={ onCanvasSet(\"encoded\") }\r\n            onImageChanged={ onImageChange(\"encoded\") }\r\n          />\r\n          <div className=\"airglow-buttons input-group mb-3\">\r\n            <button className=\"airglow-button btn btn-primary\" onClick={ (e) => {\r\n              e.preventDefault()\r\n              const encoded = canvases.encoded\r\n              if (encoded !== null) {\r\n                download(encoded, \"encoded.png\")\r\n              }\r\n            } } disabled={ images.encoded === null }\r\n            >{ i18n(\"Download\") }</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 col-lg-4\">\r\n          <div className=\"input-group mb-3\">\r\n            <label htmlFor=\"inputAlpha\" className=\"form-label\">\r\n              { i18n(\"Alpha\") }: { (alpha) }\r\n            </label>\r\n            <input type=\"range\" className=\"form-range\" min=\"1\" max=\"100\" id=\"inputAlpha\" value={ alpha * 100 }\r\n                   disabled={ isWorking }\r\n                   onChange={ (e) => void setAlpha(parseInt(e.target.value) / 100) } />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 col-lg-4\">\r\n          <div className=\"airglow-buttons input-group mt-3\">\r\n            <button\r\n              className=\"airglow-button btn btn-primary\" disabled={ isWorking || !canEncode }\r\n              onClick={ onStart(true) }\r\n            >Encode!\r\n            </button>\r\n            <button\r\n              className=\"airglow-button btn btn-primary\" disabled={ isWorking || !canDecode }\r\n              onClick={ onStart(false) }\r\n            >Decode!\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 col-lg-4\">\r\n          <div className=\"airglow-buttons input-group mt-3\">\r\n            <a className=\"airglow-button btn btn-primary\"\r\n               href=\"https://github.com/ryukina/airglow\"\r\n               target=\"_blank\"\r\n               rel=\"noreferrer\"\r\n            >{ i18n(\"Docs\") }\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n}","import \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nimport { useState } from \"react\"\r\nimport { compareVersion, getCurrentVersion, isDevelopment } from \"../utils/utils\"\r\n\r\nimport \"./Footer.css\"\r\n\r\nconst fetchVersionList = async (): Promise<string[] | null> => {\r\n  if (isDevelopment) {\r\n    return null\r\n  }\r\n  try {\r\n    const response = await fetch(\"/VERSIONS\")\r\n    const content = await response.text()\r\n    const sorted = content.split(\"\\n\")\r\n      .filter((x) => x.trim() !== \"\")\r\n      .map((x) => x.startsWith(\"v\") ? x.slice(1) : x)\r\n      .sort(compareVersion)\r\n    const versionList = sorted.filter((x, i) => i < 2 ||\r\n      !x.startsWith(sorted[i - 1].split(\".\").slice(0, -1).join(\".\"))\r\n    )\r\n    return versionList\r\n  } catch {\r\n    console.warn(\"Unable to fetch the version list.\")\r\n  }\r\n  return null\r\n}\r\n\r\n\r\nexport const Footer = (): JSX.Element => {\r\n  const currentVersion = getCurrentVersion()\r\n  const [ versionList, setVersionList ] = useState([ \"dev\", currentVersion ])\r\n  fetchVersionList().then((vl) => {\r\n    if (vl !== null) {\r\n      setVersionList(vl)\r\n    }\r\n  })\r\n  return <footer className=\"footer mt-auto py-3\">\r\n    <div className=\"footer-container container\">\r\n      <div className=\"text-muted footer-block\">By <a href=\"https://vilja.me\">Vilja</a> @ <a\r\n        href=\"https://github.com/commoon\">Commoon Labs</a>.&nbsp;</div>\r\n      <div className=\"text-muted footer-block\">Source code on <a\r\n        href={ process.env.REACT_APP_REPOSITORY }>GitHub</a>.&nbsp;</div>\r\n      <div className=\"footer-block\">\r\n        <span className=\"text-muted\">Version: </span>\r\n        <select className=\"form-select form-select-sm\"\r\n                value={ currentVersion }\r\n                onChange={ (e) => {\r\n                  const version = e.target.value\r\n                  if (e.target && e.target.selectedIndex === 1) {\r\n                    window.location.pathname = \"/stable\"\r\n                  } else if (version === \"dev\") {\r\n                    window.location.pathname = \"/dev\"\r\n                  } else {\r\n                    window.location.pathname = `/v${ version }`\r\n                  }\r\n                } }>\r\n          { versionList.map((version, i) =>\r\n            <option key={ i } value={ version }>\r\n              { version + (i === 1 ? \" (stable)\" : \"\") }\r\n            </option>) }\r\n        </select>\r\n      </div>\r\n    </div>\r\n  </footer>\r\n}","import React from \"react\"\n\nimport { Main } from \"./components/Main\"\nimport { Footer } from \"./components/Footer\"\nimport { getCurrentVersion } from \"./utils/utils\"\n\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Airglow ({ getCurrentVersion() })</h1>\n      <Main />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nwindow.onOpenCVReady = async () => {\n  delete window.onOpenCVReady\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  )\n  reportWebVitals()\n\n}\n"],"sourceRoot":""}