{"version":3,"sources":["fft.ts","utils.ts","Random.ts","airglow.ts","Footer.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["fft2Image","image","data","n","length","r","Float32Array","g","b","a","i","splitRGBA","nx","width","ny","height","rfft2d","ifft2Image","rf","gf","bf","result","output","Uint8ClampedArray","mergeRGBA","irfft2d","ImageData","swap","arr","j","t","getCurrentVersion","tmp","window","location","pathname","split","s","startsWith","v","slice","process","compareVersion","regex","aa","match","bb","x","parseInt","y","RNG","seed","c","d","this","setState","hash","charCodeAt","state","hashCode","Date","now","z","undefined","makeSeed","splitMix32","Array","from","_","Math","floor","random","makeWatermark","original","secret","rng","nWatermarks","canvas","document","createElement","ctx","getContext","nRows","nCols","Error","putImageData","putWatermarks","shuffleMap","getPermutation","newData","forEach","k","shuffleWatermark","getImageData","encode","secretKey","nWatermark","alpha","logger","trim","watermark","fftOriginal","fftWatermark","mapFunction","fftEncoded","map","encoded","decodeWatermark","decode","decoded","Footer","props","onVersionSelectedHandler","onVersionSelected","bind","currentVersion","versionList","fetch","response","text","content","filter","sort","console","warn","fetchVersionList","e","version","target","value","selectedIndex","className","href","onChange","key","React","App","canvases","onDismissAlert","dismissAlert","onLogger","onEncode","onDecode","logging","isWorking","alertType","formData","images","progress","status","app","clearRect","type","current","clearCanvas","fileInput","files","updateImage","file","Image","reader","FileReader","onload","drawImage","onloadend","src","toString","readAsDataURL","Promise","resolve","setTimeout","preventDefault","download","body","appendChild","click","removeChild","typeName","img","toDataURL","message","encodeDisabled","decodeDisabled","maxWatermarks","role","style","display","data-dismiss","aria-label","onClick","aria-hidden","ref","onChangeFile","htmlFor","id","min","max","onChangeFormData","disabled","onDownload","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","error","ReactDOM","getElementById","URL","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e41b9798.chunk.js","sourcesContent":["import { irfft2d, rfft2d } from '@ryukina/kissfft-wasm'\n\nimport { RGBA } from './utils'\n\n\nfunction splitRGBA(data: Uint8ClampedArray): RGBA {\n  const n = data.length / 4\n  const r = new Float32Array(n)\n  const g = new Float32Array(n)\n  const b = new Float32Array(n)\n  const a = new Float32Array(n)\n\n  for (let i = 0; i < n; i++) {\n    r[i] = data[4 * i]\n    g[i] = data[4 * i + 1]\n    b[i] = data[4 * i + 2]\n    a[i] = data[4 * i + 3]\n  }\n\n  return [r, g, b, a]\n}\n\nfunction mergeRGBA([r, g, b, a]: RGBA): Uint8ClampedArray {\n  const n = r.length\n  const output = new Uint8ClampedArray(n * 4)\n\n  for (let i = 0; i < n; i++) {\n    output[4 * i] = r[i]\n    output[4 * i + 1] = g[i]\n    output[4 * i + 2] = b[i]\n    output[4 * i + 3] = a[i]\n  }\n\n  return output\n}\n\nexport function fft2Image(image: ImageData): RGBA {\n  const [r, g, b, a] = splitRGBA(image.data)\n  const nx = image.width\n  const ny = image.height\n\n  return [\n    rfft2d(r, nx, ny),\n    rfft2d(g, nx, ny),\n    rfft2d(b, nx, ny),\n    a\n  ]\n}\n\nexport function ifft2Image([rf, gf, bf, a]: RGBA, width: number, height: number): ImageData {\n  const r = irfft2d(rf, width, height)\n  const g = irfft2d(gf, width, height)\n  const b = irfft2d(bf, width, height)\n  const result = mergeRGBA([r, g, b, a])\n  return new ImageData(result, width, height)\n}\n","export function swap(arr: number[] | Uint8ClampedArray, i: number, j: number) {\n  const t = arr[i]\n  arr[i] = arr[j]\n  arr[j] = t\n}\n\n\nexport type AlertType = 'primary' | 'danger' | 'success'\n\nexport type Logger = (progress: number, status: string, alertType?: AlertType) => Promise<void>\n\nexport type RGBA = [Float32Array, Float32Array, Float32Array, Float32Array]\n\nexport function getCurrentVersion(): string {\n  const versionNumber = process.env.REACT_APP_VERSION!\n  const tmp = window.location.pathname.split('/')\n  if (tmp.length > 1) {\n    const s = tmp[1]\n    if (s === 'latest') {\n      return s\n    } else if (s.startsWith('v')) {\n      const v = s.slice(1)\n      if (!versionNumber.startsWith(v)) {\n        return '???'\n      }\n    }\n  }\n  return versionNumber\n}\n\nexport function compareVersion(a: string, b: string): number {\n  if (a === 'latest') {\n    return -1\n  } else if (b === 'latest') {\n    return 1\n  }\n  const regex = /^(\\d+)\\.(\\d+)\\.(\\d+)$/\n  const aa = a.match(regex)!\n  const bb = b.match(regex)!\n  for (const i of [1, 2, 3]) {\n    const x = parseInt(aa[i])\n    const y = parseInt(bb[i])\n    if (x > y) {\n      return -1\n    } else if (x < y) {\n      return 1\n    }\n  }\n  return 0\n}\n","/*\n * xoshiro128** random number generator.\n * http://prng.di.unimi.it\n */\n\n/* tslint:disable:no-bitwise */\n\nimport { swap } from './utils'\n\nconst UINT32_MAX = 4294967296\n\nexport interface IRandomState {\n  a: number\n  b: number\n  c: number\n  d: number\n}\n\nexport type RandomSeed = IRandomState | number | string\n\nexport class RNG {\n\n  public static hashCode(s: string): number {\n    let hash = 0\n    if (s.length === 0) {\n      return hash\n    }\n    for (let i = 0; i < s.length; i++) {\n      const chr = s.charCodeAt(i)\n      hash = ((hash << 5) - hash) + chr\n      hash %= UINT32_MAX\n    }\n    return hash\n  }\n\n  public static makeSeed(state?: number | string): number {\n    if (typeof state === 'number') {\n      return state % UINT32_MAX\n    } else if (typeof state === 'string') {\n      return RNG.hashCode(state) % UINT32_MAX\n    }\n    return Date.now() % UINT32_MAX\n  }\n\n  public static splitMix32(x: [number]): number {\n    x[0] = (x[0] + 0x9e3779b9) % UINT32_MAX\n    let z = x[0]\n    z = ((z ^ (z >>> 16)) * 0x85ebca6b) % UINT32_MAX\n    z = ((z ^ (z >>> 13)) * 0xc2b2ae35) % UINT32_MAX\n    return (z ^ (z >>> 16)) % UINT32_MAX\n  }\n\n  private s: IRandomState = {a: 0, b: 0, c: 0, d: 0}\n\n  constructor(seed?: RandomSeed) {\n    this.setState(seed)\n  }\n\n  public setState(state?: RandomSeed) {\n    if (state === undefined || typeof state !== 'object') {\n      const seed: [number] = [RNG.makeSeed(state)]\n      const a = RNG.splitMix32(seed)\n      const b = RNG.splitMix32(seed)\n      const c = RNG.splitMix32(seed)\n      const d = RNG.splitMix32(seed)\n      state = {a, b, c, d}\n    }\n    this.s = state\n  }\n\n  public getState(): IRandomState {\n    return this.s\n  }\n\n  public getPermutation(length: number): number[] {\n    const arr = Array.from({ length }, (_, i) => i)\n    while (length > 1) {\n      length -= 1\n      const j = Math.floor(this.random() * length)\n      swap(arr, length, j)\n    }\n    return arr\n  }\n\n  public random(): number {\n    const s = this.s\n    const t = s.b << 9\n    let r = s.a * 5\n    r = ((r << 7) | (r >>> 25)) * 9\n    s.c ^= s.a\n    s.d ^= s.b\n    s.b ^= s.c\n    s.a ^= s.d\n    s.c ^= t\n    s.d = (s.d << 11) | (s.d >>> 21)\n    return (r >>> 0) / UINT32_MAX\n  }\n}\n","import { fft2Image, ifft2Image } from './fft'\n\nimport { RNG } from './Random'\nimport { Logger, RGBA } from './utils'\n\nexport function getMaxWatermarks(original: HTMLImageElement | null, secret: HTMLImageElement | null): number {\n  if (original === null || secret === null) {\n    return 0\n  }\n  const nRows = Math.floor(original.height / 2 / secret.height)\n  const nCols = Math.floor(original.width / secret.width)\n  return nRows * nCols\n}\n\nfunction shuffleWatermark(data: ImageData, rng: RNG): ImageData {\n  const length = Math.floor(data.data.length / 4)\n  const shuffleMap = rng.getPermutation(Math.floor(length / 2))\n  const newData = new ImageData(data.data.slice(), data.width, data.height)\n  shuffleMap.forEach((v, i) => {\n    for (let k = 0; k < 4; ++k) {\n      newData.data[i * 4 + k] = data.data[v * 4 + k]\n      newData.data[(length - 1 - i) * 4 + k] = data.data[v * 4 + k]\n    }\n  })\n  return newData\n}\n\nfunction putWatermarks(\n  canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n  original: ImageData, secret: ImageData, nWatermarks: number\n) {\n  const nRows = Math.floor(original.height / 2 / secret.height)\n  const nCols = Math.floor(original.width / secret.width)\n  if (nRows === 0 || nCols === 0) {\n    throw new Error(`Secret image is too large: use an image whose width <= ${ original.width } and` +\n      `height <= ${ Math.floor(original.height / 2) }`)\n  }\n  const {width, height} = secret\n  for (let i = 0; i < nRows; ++i) {\n    for (let j = 0; j < nCols; ++j) {\n      nWatermarks -= 1\n      if (nWatermarks < 0) {\n        return\n      }\n      ctx.putImageData(secret, j * width, i * height)\n    }\n  }\n}\n\nfunction makeWatermark(original: ImageData, secret: ImageData, rng: RNG, nWatermarks: number = 1): ImageData {\n  const canvas = document.createElement('canvas')\n  const {width, height} = original\n  canvas.width = width\n  canvas.height = height\n  const ctx = canvas.getContext('2d')!\n    putWatermarks(canvas, ctx, original, secret, nWatermarks)\n  const data = ctx.getImageData(0, 0, width, height)\n  const shuffledData = shuffleWatermark(data, rng)\n  return shuffledData\n}\n\nexport async function encode(\n  original: ImageData, secret: ImageData,\n  secretKey: string, nWatermark: number, alpha: number,\n  logger: Logger\n): Promise<ImageData> {\n  await logger(0, 'Initializing')\n  secretKey = secretKey.trim()\n  if (secretKey === '') {\n    throw new Error('Secret key cannot be empty')\n  }\n  await logger(5, 'Making watermarks')\n  const rng = new RNG(secretKey)\n  const watermark = makeWatermark(original, secret, rng, nWatermark)\n  await logger(20, 'Calculating the frequency domain of original image')\n  const fftOriginal = fft2Image(original)\n  await logger(40, 'Calculating the frequency domain of watermarks')\n  const fftWatermark = fft2Image(watermark)\n  await logger(60, 'Calculating the frequency domain of encoded image')\n  const mapFunction = (i: number) => (x: number, j: number) => x + fftWatermark[i][j] * alpha\n  const fftEncoded: RGBA = [\n    fftOriginal[0].map(mapFunction(0)),\n    fftOriginal[1].map(mapFunction(1)),\n    fftOriginal[2].map(mapFunction(2)),\n    fftOriginal[3]\n  ]\n  await logger(80, 'Calculating the resulting image')\n  const encoded = ifft2Image(fftEncoded, original.width, original.height)\n  await logger(100, 'Finished!', 'success')\n  return encoded\n}\n\nexport function decodeWatermark(watermark: ImageData, rng: RNG) {\n  const length = Math.floor(watermark.data.length / 4)\n  const shuffleMap = rng.getPermutation(Math.floor(length / 2))\n  const data = new ImageData(watermark.data.slice(), watermark.width, watermark.height)\n  shuffleMap.forEach((v, i) => {\n    for (let k = 0; k < 4; ++k) {\n      data.data[v * 4 + k] = watermark.data[i * 4 + k]\n      data.data[(length - 1 - v) * 4 + k] = watermark.data[(length - 1 - i) * 4 + k]\n    }\n  })\n  return data\n}\n\nexport async function decode(\n  original: ImageData, encoded: ImageData,\n  secretKey: string, alpha: number,\n  logger: Logger\n): Promise<ImageData> {\n  await logger(0, 'Initializing')\n  secretKey = secretKey.trim()\n  if (secretKey === ''\n  ) {\n    throw new Error('Secret key cannot be empty')\n  }\n  await logger(5, 'Calculating the frequency domain of original image')\n  const fftOriginal = fft2Image(original)\n  await logger(20, 'Calculating the frequency domain of encoded image')\n  const fftEncoded = fft2Image(encoded)\n  await logger(40, 'Calculating the frequency domain of watermarks')\n  const mapFunction = (i: number) => (x: number, j: number) => (fftEncoded[i][j] - x) / alpha\n  const fftWatermark: RGBA = [\n    fftOriginal[0].map(mapFunction(0)),\n    fftOriginal[1].map(mapFunction(1)),\n    fftOriginal[2].map(mapFunction(2)),\n    fftOriginal[3]\n  ]\n  await logger(60, 'Calculating the watermarks image')\n  const watermark = ifft2Image(fftWatermark, original.width, original.height)\n  await logger(80, 'Calculating the resulting image')\n  const rng = new RNG(secretKey)\n  const decoded = decodeWatermark(watermark, rng)\n  await logger(100, 'Finished!', 'success')\n  return decoded\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\n\nimport * as React from 'react'\n\nimport './Footer.css'\n\nimport { compareVersion, getCurrentVersion } from './utils'\n\ninterface IFooterState {\n  versionList: string[]\n  currentVersion: string\n}\n\nexport default class Footer extends React.Component<{}, IFooterState> {\n  private onVersionSelectedHandler = this.onVersionSelected.bind(this)\n\n  constructor (props: {}) {\n    super(props)\n    const currentVersion = getCurrentVersion()\n    this.state = {\n      currentVersion,\n      versionList: [\n        'latest',\n        currentVersion\n      ],\n    }\n  }\n\n  private async fetchVersionList() {\n    try {\n      const response = await fetch('/VERSIONS')\n      const content = await response.text()\n      const versionList = content.split('\\n')\n        .filter((x) => x.trim() !== '')\n        .map((x) => x.startsWith('v') ? x.slice(1) : x)\n      versionList.sort(compareVersion)\n      this.setState({\n        versionList\n      })\n    } catch {\n      // tslint:disable-next-line:no-console\n      console.warn(\"Unable to fetch the version list.\")\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchVersionList()\n  }\n\n  private onVersionSelected(e: React.ChangeEvent<HTMLSelectElement>) {\n    const version = e.target.value\n    if (e.target && e.target.selectedIndex === 1) {\n      window.location.pathname = '/stable'\n    } else if (version === 'latest') {\n      window.location.pathname = '/latest'\n    } else {\n      window.location.pathname = `/v${version}`\n    }\n  }\n\n  public render() {\n    return <footer className=\"footer mt-auto py-3\">\n      <div className=\"footer-container container\">\n        <div className=\"text-muted footer-block\">By <a href=\"https://vilja.me\">Vilja</a> @ <a href=\"https://github.com/commoon\">Commoon Labs</a>.&nbsp;</div>\n        <div className=\"text-muted footer-block\">Source code on <a href={ process.env.REACT_APP_REPOSITORY! }>GitHub</a>.&nbsp;</div>\n        <div className=\"footer-block\">\n          <span className=\"text-muted\">Version: </span>\n          <select className=\"custom-select custom-select-sm\"\n            value={ this.state.currentVersion } onChange={ this.onVersionSelectedHandler }>\n            { this.state.versionList.map((version, i) => <option key={ i }\n              value={ version }>{ version + (i === 1 ? ' (stable)' : '') }</option>) }\n          </select>\n        </div>\n      </div>\n    </footer>\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\n\nimport * as React from 'react'\n\nimport './App.css'\n\nimport { decode, encode, getMaxWatermarks } from './airglow'\nimport { getCurrentVersion, AlertType } from './utils'\n\nimport Footer from './Footer'\n\ninterface IAppFormData {\n  secretKey: string\n  alpha: number\n  nWatermarks: number\n}\n\ninterface IAppState {\n  alertType: AlertType | null\n  formData: IAppFormData\n  images: {\n    encoded: HTMLImageElement | null\n    original: HTMLImageElement | null\n    secret: HTMLImageElement | null\n  }\n  progress: number\n  status: string\n}\n\ntype ImageType = 'original' | 'secret' | 'encoded'\n\nclass App extends React.Component<{}, IAppState> {\n\n  private static clearCanvas(canvas: HTMLCanvasElement) {\n    canvas.width = 10\n    canvas.height = 10\n    const ctx = canvas.getContext('2d')\n    ctx!.clearRect(0, 0, 10, 10)\n  }\n\n  public canvases = {\n    encoded: React.createRef<HTMLCanvasElement>(),\n    original: React.createRef<HTMLCanvasElement>(),\n    secret: React.createRef<HTMLCanvasElement>()\n  }\n\n  public onDismissAlert = this.dismissAlert.bind(this)\n  public onLogger = this.logger.bind(this)\n  public onEncode = this.encode.bind(this)\n  public onDecode = this.decode.bind(this)\n\n  private logging: (() => void) | null = null\n  private isWorking = false\n\n  public constructor(props: {}) {\n    super(props)\n    this.state = {\n      alertType: null,\n      formData: {\n        alpha: 1,\n        nWatermarks: 1,\n        secretKey: ''\n      },\n      images: {\n        encoded: null,\n        original: null,\n        secret: null\n      },\n      progress: 0,\n      status: ''\n    }\n    // @ts-ignore\n    window.app = this\n  }\n\n  public dismissAlert() {\n    this.setState({alertType: null, status: ''})\n  }\n\n  public updateImage(type: ImageType, image: HTMLImageElement | null) {\n    const images = this.state.images\n    images[type] = image\n    this.setState({\n      images\n    })\n  }\n\n  public onChangeFile(type: ImageType) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      const canvas = this.canvases[type].current\n      if (canvas === null) {\n        return\n      }\n      App.clearCanvas(canvas)\n      const fileInput = e.target as HTMLInputElement\n      const files = fileInput.files\n      if (files === null || files.length < 1) {\n        this.updateImage(type, null)\n        return\n      }\n      const file = files[0]\n      const image = new Image()\n      const reader = new FileReader()\n      image.onload = () => {\n        canvas.width = image.width\n        canvas.height = image.height\n        const ctx = canvas.getContext('2d')\n        ctx!.drawImage(image, 0, 0)\n        this.updateImage(type, image)\n      }\n      reader.onloadend = () => {\n        if (reader.result !== null) {\n          image.src = reader.result.toString()\n        }\n      }\n      reader.readAsDataURL(file)\n      fileInput.value = ''\n    }\n  }\n\n  public logger(progress: number, status: string, alertType: AlertType = 'primary'): Promise<void> {\n    return new Promise<void>(resolve => {\n      this.logging = () => {\n        resolve()\n      }\n      this.setState({\n        alertType,\n        progress,\n        status\n      })\n    })\n  }\n\n  public componentDidUpdate(): void {\n    if (this.logging !== null) {\n      const t = this.logging\n      this.logging = null\n      setTimeout(t, 300)\n    }\n  }\n\n  public onDownload(type: ImageType) {\n    return (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      const image = this.state.images[type]\n      if (image === null) {\n        return\n      }\n      const a = document.createElement('a')\n      a.href = image.src\n      a.download = 'encoded.png'\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    }\n  }\n\n  public async encode(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault()\n    if (this.isWorking) {\n      return\n    }\n    this.isWorking = true\n    const {secretKey, alpha, nWatermarks} = this.state.formData\n    const data: any = {}\n    for (const typeName of ['original', 'secret']) {\n      const type = typeName as ImageType\n      const ctx = this.canvases[type].current!.getContext('2d')!\n      const img = this.state.images[type]\n      if (img === null) {\n        return\n      }\n      data[type] = ctx.getImageData(0, 0, img.width, img.height)\n    }\n    const canvas = this.canvases.encoded.current!\n    App.clearCanvas(canvas)\n    try {\n      const result = await encode(data.original, data.secret, secretKey, nWatermarks, alpha / 100, this.onLogger)\n      canvas.width = result.width\n      canvas.height = result.height\n      const ctx = canvas.getContext('2d')!\n      ctx.putImageData(result, 0, 0)\n      const image = document.createElement('img')\n      image.onload = () => this.updateImage('encoded', image)\n      image.src = canvas.toDataURL('image/png')\n    } catch (e) {\n      this.setState({\n        alertType: 'danger',\n        status: e.message\n      })\n    }\n    this.isWorking = false\n  }\n\n  public async decode(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault()\n    if (this.isWorking) {\n      return\n    }\n    this.isWorking = true\n    const {alpha, secretKey} = this.state.formData\n    const data: any = {}\n    for (const typeName of ['original', 'encoded']) {\n      const type = typeName as ImageType\n      const ctx = this.canvases[type].current!.getContext('2d')!\n      const img = this.state.images[type]\n      if (img === null) {\n        return\n      }\n      data[type] = ctx.getImageData(0, 0, img.width, img.height)\n    }\n    const canvas = this.canvases.secret.current!\n    App.clearCanvas(canvas)\n    try {\n      const result = await decode(data.original, data.encoded, secretKey, alpha / 100, this.onLogger)\n      canvas.width = result.width\n      canvas.height = result.height\n      const ctx = canvas.getContext('2d')!\n      ctx.putImageData(result, 0, 0)\n      const image = document.createElement('img')\n      image.onload = () => this.updateImage('secret', image)\n      image.src = canvas.toDataURL('image/png')\n    } catch (e) {\n      this.setState({\n        alertType: 'danger',\n        status: e.message\n      })\n    }\n    this.isWorking = false\n  }\n\n  public render() {\n    const {alertType, formData, images, progress, status} = this.state\n    const encodeDisabled = images.original === null || images.secret === null || formData.secretKey.trim() === ''\n    const decodeDisabled = images.encoded === null || images.original === null || formData.secretKey.trim() === ''\n    const maxWatermarks = getMaxWatermarks(images.original, images.secret)\n    return (<div className=\"App\">\n      <form className=\"airglow-form container-fluid\">\n        <h1>Airglow ({ getCurrentVersion() })</h1>\n        <div className={ 'alert alert-dismissible fade show' + (alertType !== null ? ` alert-${ alertType }` : '') }\n             role=\"alert\" style={ {display: alertType === null ? 'none' : 'block'} }>\n          { status }\n          <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"\n                  onClick={ this.onDismissAlert }>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div className=\"airglow-progress progress\">\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\"\n               style={ {width: `${ progress }%`} }/>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-4 container\">\n            <div className=\"form-group\">\n              <div className=\"airglow-canvas-container\">\n                <canvas className=\"airglow-canvas\" width={ 10 } height={ 10 } ref={ this.canvases.secret }/>\n              </div>\n              <div className=\"airglow-file input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Secret Image</span>\n                </div>\n                <div className=\"custom-file\">\n                  <input type=\"file\" className=\"custom-file-input\"\n                         onChange={ this.onChangeFile('secret') }/>\n                  <label className=\"custom-file-label\" htmlFor=\"inputGroupSecretImage\">{\n                    images.secret === null ? '' : `${ images.secret.width }*${ images.secret.height }`\n                  }</label>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-group input-group\">\n              <div className=\"input-group-prepend\">\n                <label className=\"input-group-text\" htmlFor=\"forNWatermarks\">Number of Watermarks</label>\n              </div>\n              <input type=\"number\" className=\"form-control\" id=\"forNWatermarks\" min={ 1 } max={ maxWatermarks }\n                     value={ formData.nWatermarks } onChange={ this.onChangeFormData('nWatermarks') }/>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 container\">\n            <div className=\"form-group\">\n              <div className=\"airglow-canvas-container\">\n                <canvas className=\"airglow-canvas\" width={ 10 } height={ 10 } ref={ this.canvases.original }/>\n              </div>\n              <div className=\"airglow-file form-group input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Original Image</span>\n                </div>\n                <div className=\"custom-file\">\n                  <input type=\"file\" className=\"custom-file-input\"\n                         onChange={ this.onChangeFile('original') }/>\n                  <label className=\"custom-file-label\" htmlFor=\"inputGroupOriginalImage\">{\n                    images.original === null ? '' : `${ images.original.width }*${ images.original.height }`\n                  }</label>\n                </div>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <label className=\"input-group-text\" htmlFor=\"formSecretKey\">Secret Key</label>\n                </div>\n                <input type=\"text\" className=\"form-control\" id=\"formSecretKey\"\n                       value={ formData.secretKey } onChange={ this.onChangeFormData('secretKey') }/>\n              </div>\n              <small className=\"form-text text-muted\">\n                A secret key used to encrypt the data.\n              </small>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"forAlpha\">Alpha: { formData.alpha / 100 }</label>\n              <input type=\"range\" className=\"custom-range\" id=\"forAlpha\" min={ 1 } max={ 100 }\n                     value={ formData.alpha } onChange={ this.onChangeFormData('alpha') }/>\n            </div>\n            <div className=\"airglow-buttons form-group\">\n              <button className=\"airglow-button btn btn-primary\"\n                      disabled={ encodeDisabled }\n                      onClick={ this.onEncode }>Encode!\n              </button>\n              <button className=\"airglow-button btn btn-primary\"\n                      disabled={ decodeDisabled }\n                      onClick={ this.onDecode }>Decode!\n              </button>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 container\">\n            <div className=\"form-group\">\n              <div className=\"airglow-canvas-container\">\n                <canvas className=\"airglow-canvas\" width={ 10 } height={ 10 } ref={ this.canvases.encoded }/>\n              </div>\n              <div className=\"airglow-file input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">Encoded Image</span>\n                </div>\n                <div className=\"custom-file\">\n                  <input type=\"file\" className=\"custom-file-input\"\n                         onChange={ this.onChangeFile('encoded') }/>\n                  <label className=\"custom-file-label\" htmlFor=\"inputGroupEncodedImage\">{\n                    images.encoded === null ? '' : `${ images.encoded.width }*${ images.encoded.height }`\n                  }</label>\n                </div>\n              </div>\n            </div>\n            <div className=\"airglow-buttons form-group\">\n              <button className=\"airglow-button btn btn-primary\"\n                      disabled={ images.encoded === null }\n                      onClick={ this.onDownload('encoded') }>Download\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n      <Footer/>\n    </div>)\n  }\n\n  public onChangeFormData(key: keyof IAppFormData) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      const formData = this.state.formData as any\n      formData[key] = (e.target as HTMLInputElement).value\n      this.setState({\n        formData\n      })\n    }\n  }\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n)\nregisterServiceWorker()\n"],"sourceRoot":""}